services:
  db:
    image: postgres:latest
    restart: unless-stopped 
    container_name: postgres_db
    hostname: postgres_db
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/postgres:/docker-entrypoint-initdb.d
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s    
      timeout: 5s            
      retries: 5       
      start_period: 30s 
    volumes:
      - kafkaData:/bitnami/kafka
    command:
      - /bin/bash
      - -c
      - |
        # Запускаем Kafka в фоне
        /opt/bitnami/scripts/kafka/run.sh &
        KAFKA_PID=$$

        # Ждём, пока Kafka станет готова
        echo "⏳ Waiting for Kafka to be ready..."
        until kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1; do
          sleep 5
        done

        # Создаём топик 'order', если его нет
        echo "✅ Creating topic 'order'..."
        kafka-topics.sh --bootstrap-server localhost:9092 \
          --create \
          --topic order \
          --partitions 3 \
          --replication-factor 1 \
          --if-not-exists

        # Передаём управление основному процессу
        wait $$KAFKA_PID

  app:
    build: .
    container_name: app
    environment:      
      DB_PORT: 5432
      DB_HOST: postgres_db
      KAFKA_PORT: 9092
      KAFKA_HOST: kafka
      APP_HOST: 0.0.0.0   
      APP_PORT: 8080
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      db: 
        condition: service_healthy
      kafka:
        condition: service_healthy
      

volumes:
  pgdata:
  kafkaData:


